#!/usr/bin/env node
"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _chunk2R46SKJJjs = require('../chunk-2R46SKJJ.js');var _core = require('@orval/core');var _cac = require('cac');var _chalk = require('chalk'); var _chalk2 = _interopRequireDefault(_chalk);var j=_chunk2R46SKJJjs.a.call(void 0, ()=>{_chunk2R46SKJJjs.k.call(void 0, );var e=_chunk2R46SKJJjs.b.call(void 0, _chunk2R46SKJJjs.c.call(void 0, ));_chunk2R46SKJJjs.f.call(void 0, );_chunk2R46SKJJjs.h.call(void 0, );var o=_cac.cac.call(void 0, "orval");_core.startMessage.call(void 0, {name:e.default.name,version:e.default.version,description:e.default.description});o.version(e.default.version);o.command("[config]","generate client with appropriate type-signatures from OpenAPI specs",{ignoreOptionDefaultValue:!0}).option("-o, --output <path>","output file destination").option("-i, --input <path>","input file (yaml or json openapi specs)").option("-c, --config <path>","override flags by a config file").option("-p, --project <name>","focus a project of the config").option("-m, --mode <name>","default mode that will be used").option("-c, --client <name>","default client that will be used").option("--mock","activate the mock").option("-w, --watch [path]","Watch mode, if path is not specified, it watches the input target").option("--clean [path]","Clean output directory").option("--prettier [path]","Prettier generated files").option("--tslint [path]","tslint generated files").option("--tsconfig [path]","path to your tsconfig file").action(async(b,t)=>{if(!t.config&&_core.isString.call(void 0, t.input)&&_core.isString.call(void 0, t.output)){let i=await _chunk2R46SKJJjs.e.call(void 0, {input:t.input,output:{target:t.output,clean:t.clean,prettier:t.prettier,tslint:t.tslint,mock:t.mock,client:t.client,mode:t.mode,tsconfig:t.tsconfig}});if(t.watch)_chunk2R46SKJJjs.g.call(void 0, t.watch,async()=>{try{await _chunk2R46SKJJjs.i.call(void 0, process.cwd(),i)}catch(n){_core.log.call(void 0, _chalk2.default.red(`\u{1F6D1}  ${n}`))}},i.input.target);else try{await _chunk2R46SKJJjs.i.call(void 0, process.cwd(),i)}catch(n){_core.log.call(void 0, _chalk2.default.red(`\u{1F6D1}  ${n}`))}}else await _chunk2R46SKJJjs.j.call(void 0, t.config,{projectName:t.project,watch:t.watch,clean:t.clean,prettier:t.prettier,tslint:t.tslint,mock:t.mock,client:t.client,mode:t.mode,tsconfig:t.tsconfig,input:t.input,output:t.output})});o.help();o.parse(process.argv)});exports. default = j();
